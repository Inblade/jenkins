pipeline {
   ipeline {
    agent {
        label 'work1'
        }
    
         stage ('Build'){
             when { agent {
        label 'work1'
        }
    triggers { pollSCM('* * * * *') }
    stages {
        stage('Check commit') {
         steps {   
               
                    //Using the git command to check the difference between previous successful commit. ${GIT_PREVIOUS_SUCCESSFUL_COMMIT} is an environment variable comes with GIT Jenkins plugin
                    //There is a drawback though, if it is the first time you are running this job, this variable is not available and fails the build
                    //For the first time i had to use ${env.GIT_COMMIT} itself at both places to pass the build. A hack but worth it for future builds.

                    def strCount = sh(returnStdout: true, script: "git diff --name-only ${env.GIT_COMMIT} ${GIT_PREVIOUS_SUCCESSFUL_COMMIT} | grep index* | wc -l").trim()
                    if(strCount=="0") {
                        echo "Skipping build no files updated"
                        CONTINUE_BUILD = false
                    } else {
                        echo "Changes found"
                    }
         stage ('Build'){
             when {
            expression { return params.FORCE_BUILD || CONTINUE_BUILD }
        }
       steps {
            script {
                "git config --global user.email dkocheto@gmail.com | git config --global user.name inblade | chmod 755 index.html | cp index.html /usr/local/share/applications/ | ln -fs /usr/local/share/applications/index.html /usr/share/nginx/html" }
            }
           }
        }
      }
    }
}
}
}
}
